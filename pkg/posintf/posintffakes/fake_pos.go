// Code generated by counterfeiter. DO NOT EDIT.
package posintffakes

import (
	"davesstore/pkg/posintf"
	"sync"
)

type FakePOS struct {
	CreditPaymentStub        func(float64) bool
	creditPaymentMutex       sync.RWMutex
	creditPaymentArgsForCall []struct {
		arg1 float64
	}
	creditPaymentReturns struct {
		result1 bool
	}
	creditPaymentReturnsOnCall map[int]struct {
		result1 bool
	}
	DebitPaymentStub        func(float64) bool
	debitPaymentMutex       sync.RWMutex
	debitPaymentArgsForCall []struct {
		arg1 float64
	}
	debitPaymentReturns struct {
		result1 bool
	}
	debitPaymentReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePOS) CreditPayment(arg1 float64) bool {
	fake.creditPaymentMutex.Lock()
	ret, specificReturn := fake.creditPaymentReturnsOnCall[len(fake.creditPaymentArgsForCall)]
	fake.creditPaymentArgsForCall = append(fake.creditPaymentArgsForCall, struct {
		arg1 float64
	}{arg1})
	stub := fake.CreditPaymentStub
	fakeReturns := fake.creditPaymentReturns
	fake.recordInvocation("CreditPayment", []interface{}{arg1})
	fake.creditPaymentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePOS) CreditPaymentCallCount() int {
	fake.creditPaymentMutex.RLock()
	defer fake.creditPaymentMutex.RUnlock()
	return len(fake.creditPaymentArgsForCall)
}

func (fake *FakePOS) CreditPaymentCalls(stub func(float64) bool) {
	fake.creditPaymentMutex.Lock()
	defer fake.creditPaymentMutex.Unlock()
	fake.CreditPaymentStub = stub
}

func (fake *FakePOS) CreditPaymentArgsForCall(i int) float64 {
	fake.creditPaymentMutex.RLock()
	defer fake.creditPaymentMutex.RUnlock()
	argsForCall := fake.creditPaymentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePOS) CreditPaymentReturns(result1 bool) {
	fake.creditPaymentMutex.Lock()
	defer fake.creditPaymentMutex.Unlock()
	fake.CreditPaymentStub = nil
	fake.creditPaymentReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakePOS) CreditPaymentReturnsOnCall(i int, result1 bool) {
	fake.creditPaymentMutex.Lock()
	defer fake.creditPaymentMutex.Unlock()
	fake.CreditPaymentStub = nil
	if fake.creditPaymentReturnsOnCall == nil {
		fake.creditPaymentReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.creditPaymentReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakePOS) DebitPayment(arg1 float64) bool {
	fake.debitPaymentMutex.Lock()
	ret, specificReturn := fake.debitPaymentReturnsOnCall[len(fake.debitPaymentArgsForCall)]
	fake.debitPaymentArgsForCall = append(fake.debitPaymentArgsForCall, struct {
		arg1 float64
	}{arg1})
	stub := fake.DebitPaymentStub
	fakeReturns := fake.debitPaymentReturns
	fake.recordInvocation("DebitPayment", []interface{}{arg1})
	fake.debitPaymentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePOS) DebitPaymentCallCount() int {
	fake.debitPaymentMutex.RLock()
	defer fake.debitPaymentMutex.RUnlock()
	return len(fake.debitPaymentArgsForCall)
}

func (fake *FakePOS) DebitPaymentCalls(stub func(float64) bool) {
	fake.debitPaymentMutex.Lock()
	defer fake.debitPaymentMutex.Unlock()
	fake.DebitPaymentStub = stub
}

func (fake *FakePOS) DebitPaymentArgsForCall(i int) float64 {
	fake.debitPaymentMutex.RLock()
	defer fake.debitPaymentMutex.RUnlock()
	argsForCall := fake.debitPaymentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePOS) DebitPaymentReturns(result1 bool) {
	fake.debitPaymentMutex.Lock()
	defer fake.debitPaymentMutex.Unlock()
	fake.DebitPaymentStub = nil
	fake.debitPaymentReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakePOS) DebitPaymentReturnsOnCall(i int, result1 bool) {
	fake.debitPaymentMutex.Lock()
	defer fake.debitPaymentMutex.Unlock()
	fake.DebitPaymentStub = nil
	if fake.debitPaymentReturnsOnCall == nil {
		fake.debitPaymentReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.debitPaymentReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakePOS) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.creditPaymentMutex.RLock()
	defer fake.creditPaymentMutex.RUnlock()
	fake.debitPaymentMutex.RLock()
	defer fake.debitPaymentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePOS) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ posintf.POS = new(FakePOS)
